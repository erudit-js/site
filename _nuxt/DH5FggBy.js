import{e as s,l as o}from"./Bk3fzIkA.js";import"./CiBNX5Fz.js";const u=[[/\s*-\s*/g," â€“ "],[/\s*\+\s*/g," + "],[/\s*=\s*/g," = "]];function p(e){return e.map(t=>{if(t.type==="other"){let a=t.value;for(const[l,r]of u)a=a.replace(l,r);return{...t,value:a}}return t})}function c(e){if(!e)return;const t=(()=>{if(/[\^\\{}_]/gm.test(e))return!1;const l=new RegExp("(\\p{L}+)|([^\\p{L}]+)","gu"),r=[];let n;for(;(n=l.exec(e))!==null;)n[1]?r.push({type:"word",value:n[1]}):n[2]&&r.push({type:"other",value:n[2]});return r})();if(t)return{type:"string",tokens:p(t)}}async function f(e){s(e);const t=c(e);return t||{type:"katex",html:await o(e,"inline")}}export{f as renderInlineMath,c as tryParseMathString};
